{"version":3,"file":"cron-service.cjs.development.js","sources":["../src/db.ts","../src/index.ts"],"sourcesContent":["// db.ts\nimport mongoose from 'mongoose';\nrequire('dotenv').config();\n\n// MongoDB connection URI\nconst mongoURI = process.env.MONGODB_URL ? process.env.MONGODB_URL : '';\n\n// Function to connect to MongoDB\nexport const connectDB = async () => {\n\tmongoose.connect(mongoURI, { useNewUrlParser: true, useUnifiedTopology: true } as any)\n\t.then(() => {\n\t\tconsole.log('Connected to MongoDB');\n\t})\n\t.catch((err: Error) => {\n\t\tconsole.error('Error connecting to MongoDB:', err.message);\n\t});\n};\n\nexport default mongoose; // Export mongoose instance for use in other files\n","import cron from 'node-cron';\nimport mongoose, { connectDB } from \"./db\";\nconst Model = require('./models/data');\nconst whatsAppClient = require(\"@green-api/whatsapp-api-client\");\nrequire('dotenv').config();\n\nconst restAPI = whatsAppClient.restAPI({\n  idInstance: process.env.ID_INSTANCE || '',\n  apiTokenInstance: process.env.API_TOKEN_INSTANCE || ''\n});\n\nconst _main = async() => {\n\ttry {\n\t\tlet records = await Model.find()\n\t\tif(records && records.length > 0) {\n\t\t\tfor(let i = 0; i < records.length; i++){\n\t\t\t\tlet single_record = records[i]\n\t\t\t\tif(single_record.phone && single_record.date){\n\t\t\t\t\tif(new Date() > new Date(single_record.date)){\n\t\t\t\t\t\tconst differenceInMilliseconds = new Date().getTime() - new Date(single_record.date).getTime();\n\t\t\t\t\t\tconst millisecondsInDay = 1000 * 60 * 60 * 24; \n\t\t\t\t\t\tconst differenceInDays = Math.floor(differenceInMilliseconds / millisecondsInDay);\n\t\t\t\t\t\tif(differenceInDays >= 0 && differenceInDays <= 2){\n\t\t\t\t\t\t\tawait restAPI.message.sendMessage(single_record.phone, null, `Hey there! ðŸŒ¼ Flow Friend is Back with a friendly reminder: Your period is around the corner. It's been ${differenceInDays} days since your last one.\\n\\nJust reply with \"Got my period\" to update your date.`)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (err) {\n\t\tconsole.log(err)\n\t}\n}\n\ncron.schedule(`*/10 * * * * *`, async () => { //0 11 * * *\n  console.log(`running your task...`);\n  connectDB().then(() => {_main()})\n});"],"names":["require","config","mongoURI","process","env","MONGODB_URL","connectDB","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","mongoose","connect","useNewUrlParser","useUnifiedTopology","then","console","log","err","error","message","stop","apply","arguments","Model","whatsAppClient","restAPI","idInstance","ID_INSTANCE","apiTokenInstance","API_TOKEN_INSTANCE","_main","records","i","single_record","differenceInMilliseconds","millisecondsInDay","differenceInDays","find","sent","length","phone","date","Date","getTime","Math","floor","sendMessage","t0","cron","schedule","_callee2","_callee2$","_context2"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEAA,OAAO,CAAC,QAAQ,CAAC,CAACC,MAAM,EAAE,CAAA;AAE1B;AACA,IAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,WAAW,GAAGF,OAAO,CAACC,GAAG,CAACC,WAAW,GAAG,EAAE,CAAA;AAEvE;AACO,IAAMC,SAAS,gBAAA,YAAA;EAAA,IAAAC,IAAA,gBAAAC,iBAAA,cAAAC,mBAAA,EAAAC,CAAAA,IAAA,CAAG,SAAAC,OAAA,GAAA;AAAA,IAAA,OAAAF,mBAAA,EAAA,CAAAG,IAAA,CAAA,SAAAC,SAAAC,QAAA,EAAA;AAAA,MAAA,OAAA,CAAA,EAAA;AAAA,QAAA,QAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;AAAA,UAAA,KAAA,CAAA;AACxBC,YAAAA,4BAAQ,CAACC,OAAO,CAAChB,QAAQ,EAAE;AAAEiB,cAAAA,eAAe,EAAE,IAAI;AAAEC,cAAAA,kBAAkB,EAAE,IAAA;aAAa,CAAC,CACrFC,IAAI,CAAC,YAAK;AACVC,cAAAA,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC,CAAA;AACpC,aAAC,CAAC,CAAA,OAAA,CACI,CAAC,UAACC,GAAU,EAAI;cACrBF,OAAO,CAACG,KAAK,CAAC,8BAA8B,EAAED,GAAG,CAACE,OAAO,CAAC,CAAA;AAC3D,aAAC,CAAC,CAAA;AAAC,UAAA,KAAA,CAAA,CAAA;AAAA,UAAA,KAAA,KAAA;YAAA,OAAAZ,QAAA,CAAAa,IAAA,EAAA,CAAA;AAAA,SAAA;AAAA,OAAA;AAAA,KAAA,EAAAhB,OAAA,CAAA,CAAA;GACH,CAAA,CAAA,CAAA;AAAA,EAAA,OAAA,SARYL,SAASA,GAAA;AAAA,IAAA,OAAAC,IAAA,CAAAqB,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;AAAA,GAAA,CAAA;AAAA,CAQrB,EAAA,CAAA;AAEuB;;AChBxB,IAAMC,KAAK,gBAAG9B,OAAO,CAAC,eAAe,CAAC,CAAA;AACtC,IAAM+B,cAAc,gBAAG/B,OAAO,CAAC,gCAAgC,CAAC,CAAA;AAChEA,OAAO,CAAC,QAAQ,CAAC,CAACC,MAAM,EAAE,CAAA;AAE1B,IAAM+B,OAAO,gBAAGD,cAAc,CAACC,OAAO,CAAC;AACrCC,EAAAA,UAAU,EAAE9B,OAAO,CAACC,GAAG,CAAC8B,WAAW,IAAI,EAAE;AACzCC,EAAAA,gBAAgB,EAAEhC,OAAO,CAACC,GAAG,CAACgC,kBAAkB,IAAI,EAAA;AACrD,CAAA,CAAC,CAAA;AAEF,IAAMC,KAAK,gBAAA,YAAA;EAAA,IAAA9B,IAAA,gBAAAC,iBAAA,cAAAC,mBAAA,EAAAC,CAAAA,IAAA,CAAG,SAAAC,OAAA,GAAA;IAAA,IAAA2B,OAAA,EAAAC,CAAA,EAAAC,aAAA,EAAAC,wBAAA,EAAAC,iBAAA,EAAAC,gBAAA,CAAA;AAAA,IAAA,OAAAlC,mBAAA,EAAA,CAAAG,IAAA,CAAA,SAAAC,SAAAC,QAAA,EAAA;AAAA,MAAA,OAAA,CAAA,EAAA;AAAA,QAAA,QAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;AAAA,UAAA,KAAA,CAAA;AAAAF,YAAAA,QAAA,CAAAC,IAAA,GAAA,CAAA,CAAA;AAAAD,YAAAA,QAAA,CAAAE,IAAA,GAAA,CAAA,CAAA;AAAA,YAAA,OAEQc,KAAK,CAACc,IAAI,EAAE,CAAA;AAAA,UAAA,KAAA,CAAA;YAA5BN,OAAO,GAAAxB,QAAA,CAAA+B,IAAA,CAAA;AAAA,YAAA,IAAA,EACRP,OAAO,IAAIA,OAAO,CAACQ,MAAM,GAAG,CAAC,CAAA,EAAA;AAAAhC,cAAAA,QAAA,CAAAE,IAAA,GAAA,EAAA,CAAA;AAAA,cAAA,MAAA;AAAA,aAAA;AACvBuB,YAAAA,CAAC,GAAG,CAAC,CAAA;AAAA,UAAA,KAAA,CAAA;AAAA,YAAA,IAAA,EAAEA,CAAC,GAAGD,OAAO,CAACQ,MAAM,CAAA,EAAA;AAAAhC,cAAAA,QAAA,CAAAE,IAAA,GAAA,EAAA,CAAA;AAAA,cAAA,MAAA;AAAA,aAAA;AAC5BwB,YAAAA,aAAa,GAAGF,OAAO,CAACC,CAAC,CAAC,CAAA;AAAA,YAAA,IAAA,EAC3BC,aAAa,CAACO,KAAK,IAAIP,aAAa,CAACQ,IAAI,CAAA,EAAA;AAAAlC,cAAAA,QAAA,CAAAE,IAAA,GAAA,EAAA,CAAA;AAAA,cAAA,MAAA;AAAA,aAAA;YAAA,IACxC,EAAA,IAAIiC,IAAI,EAAE,GAAG,IAAIA,IAAI,CAACT,aAAa,CAACQ,IAAI,CAAC,CAAA,EAAA;AAAAlC,cAAAA,QAAA,CAAAE,IAAA,GAAA,EAAA,CAAA;AAAA,cAAA,MAAA;AAAA,aAAA;YACrCyB,wBAAwB,GAAG,IAAIQ,IAAI,EAAE,CAACC,OAAO,EAAE,GAAG,IAAID,IAAI,CAACT,aAAa,CAACQ,IAAI,CAAC,CAACE,OAAO,EAAE,CAAA;AACxFR,YAAAA,iBAAiB,GAAG,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAA;YACvCC,gBAAgB,GAAGQ,IAAI,CAACC,KAAK,CAACX,wBAAwB,GAAGC,iBAAiB,CAAC,CAAA;AAAA,YAAA,IAAA,EAC9EC,gBAAgB,IAAI,CAAC,IAAIA,gBAAgB,IAAI,CAAC,CAAA,EAAA;AAAA7B,cAAAA,QAAA,CAAAE,IAAA,GAAA,EAAA,CAAA;AAAA,cAAA,MAAA;AAAA,aAAA;AAAAF,YAAAA,QAAA,CAAAE,IAAA,GAAA,EAAA,CAAA;AAAA,YAAA,OAC1CgB,OAAO,CAACN,OAAO,CAAC2B,WAAW,CAACb,aAAa,CAACO,KAAK,EAAE,IAAI,EAA6GJ,oHAAAA,GAAAA,gBAAgB,yFAAoF,CAAC,CAAA;AAAA,UAAA,KAAA,EAAA;AAR9OJ,YAAAA,CAAC,EAAE,CAAA;AAAAzB,YAAAA,QAAA,CAAAE,IAAA,GAAA,CAAA,CAAA;AAAA,YAAA,MAAA;AAAA,UAAA,KAAA,EAAA;AAAAF,YAAAA,QAAA,CAAAE,IAAA,GAAA,EAAA,CAAA;AAAA,YAAA,MAAA;AAAA,UAAA,KAAA,EAAA;AAAAF,YAAAA,QAAA,CAAAC,IAAA,GAAA,EAAA,CAAA;YAAAD,QAAA,CAAAwC,EAAA,GAAAxC,QAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAevCQ,YAAAA,OAAO,CAACC,GAAG,CAAAT,QAAA,CAAAwC,EAAI,CAAC,CAAA;AAAA,UAAA,KAAA,EAAA,CAAA;AAAA,UAAA,KAAA,KAAA;YAAA,OAAAxC,QAAA,CAAAa,IAAA,EAAA,CAAA;AAAA,SAAA;AAAA,OAAA;AAAA,KAAA,EAAAhB,OAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,CAAA,CAAA;GAEjB,CAAA,CAAA,CAAA;AAAA,EAAA,OAAA,SArBK0B,KAAKA,GAAA;AAAA,IAAA,OAAA9B,IAAA,CAAAqB,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;AAAA,GAAA,CAAA;AAAA,CAqBV,EAAA,CAAA;AAED0B,wBAAI,CAACC,QAAQ,CAAA,gBAAA,eAAAhD,iBAAA,cAAAC,mBAAA,EAAAC,CAAAA,IAAA,CAAmB,SAAA+C,QAAA,GAAA;AAAA,EAAA,OAAAhD,mBAAA,EAAA,CAAAG,IAAA,CAAA,SAAA8C,UAAAC,SAAA,EAAA;AAAA,IAAA,OAAA,CAAA,EAAA;AAAA,MAAA,QAAAA,SAAA,CAAA5C,IAAA,GAAA4C,SAAA,CAAA3C,IAAA;AAAA,QAAA,KAAA,CAAA;UAC9BM,OAAO,CAACC,GAAG,CAAA,sBAAuB,CAAC,CAAA;AACnCjB,UAAAA,SAAS,EAAE,CAACe,IAAI,CAAC,YAAO;AAAAgB,YAAAA,KAAK,EAAE,CAAA;AAAA,WAAC,CAAC,CAAA;AAAA,QAAA,KAAA,CAAA,CAAA;AAAA,QAAA,KAAA,KAAA;UAAA,OAAAsB,SAAA,CAAAhC,IAAA,EAAA,CAAA;AAAA,OAAA;AAAA,KAAA;AAAA,GAAA,EAAA8B,QAAA,CAAA,CAAA;AAAA,CAClC,CAAC,CAAA,CAAA;;"}